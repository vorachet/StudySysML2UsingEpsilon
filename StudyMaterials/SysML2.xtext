/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018, 2021 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 * Copyright (c) 2019 Mgnite Inc.
 *    
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of theGNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 * 
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft/Mgnite
 * 
 *****************************************************************************/

grammar org.omg.sysml.xtext.SysML with org.omg.kerml.expressions.xtext.KerMLExpressions

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.omg.org/spec/SysML/2.0" as SysML

/* ROOT PACKAGE */

RootNamespace returns SysML::Namespace :
	{SysML::Namespace} PackageBodyElement*
;

/* BASIC ELEMENTS */

fragment Identification returns SysML::Element :
	  '<' humanId = Name '>' ( name = Name )?
	| name = Name
;

/* ANNOTATIONS */

/* Comments */

Comment returns SysML::Comment :
	( 'comment' Identification? 'about' ownedRelationship += Annotation
	  ( ',' ownedRelationship += Annotation )*
	| ( 'comment' Identification? )? ownedRelationship += EmptyAnnotation
	)
	body = REGULAR_COMMENT
;

Annotation returns SysML::Annotation :
	annotatedElement = [SysML::Element|QualifiedName]
;

EmptyAnnotation returns SysML::Annotation :
	{SysML::Annotation}
;

/* Documentation */

OwnedDocumentation returns SysML::Documentation :
	ownedRelatedElement += DocumentationComment // documentingComment = DocumentationComment
;

DocumentationComment returns SysML::Comment :
	'doc' ( '<' humanId = Name '>' )? body = REGULAR_COMMENT
;

PrefixDocumentation returns SysML::Annotation :
	ownedRelatedElement += PrefixDocumentationComment
;

PrefixDocumentationComment returns SysML::Comment :
	( 'doc' ( '<' humanId = Name '>' )? )? body = DOCUMENTATION_COMMENT
;

/* Textual Representation */

TextualRepresentation returns SysML::TextualRepresentation :
    ( 'rep' Identification? 'about' ownedRelationship += Annotation
    | ( 'rep' Identification? )? ownedRelationship += EmptyAnnotation
    )
    'language' language = STRING_VALUE 
    body = REGULAR_COMMENT
;

/* Annotating Features */

AnnotatingFeature returns SysML::AnnotatingFeature :
	( '@' | 'metadata' ) AnnotatingFeatureDeclaration 
	( 'about' ownedRelationship += Annotation ( ',' ownedRelationship += Annotation )* 
	| ownedRelationship += EmptyAnnotation
	)	
	AnnotatingFeatureBody
;

fragment AnnotatingFeatureDeclaration returns SysML::AnnotatingFeature :
	( Identification DefinedByKeyword )? ownedRelationship += MetadataTyping
;

MetadataTyping returns SysML::FeatureTyping :
	type = [SysML::DataType | QualifiedName]
;

fragment AnnotatingFeatureBody returns SysML::AnnotatingFeature :
	';' | '{' ( ownedRelationship += MetadataFeatureMember )* '}'
;

MetadataFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += MetadataFeature // ownedMemberFeature = MetadataFeature
;

MetadataFeature returns SysML::MetadataFeature :
	'feature'? ( ':>>' | 'redefines')? ownedRelationship += OwnedRedefinition 
	'=' ownedRelationship += MetadataFeatureValue ';' // metadataFeatureValue = MetadataFeatureValue ';'
;

MetadataFeatureValue returns SysML::MetadataFeatureValue :
	ownedRelatedElement += OwnedExpression // metadataValue = OwnedExpression
;

/* PACKAGES */

/* Packages */

Package returns SysML::Package :
	PackageDeclaration PackageBody 
;

fragment PackageDeclaration returns SysML::Package :
	'package' Identification?
;

fragment PackageBody returns SysML::Package :
	  ';' 
	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
		    ownedRelationship += OwnedDocumentation
		  | ownedRelationship += PackageMember
		  | ownedRelationship += ElementFilterMember
		  | ownedRelationship += AliasMember
		  | ownedRelationship += Import )* 
	  '}'
;

/* Package Bodies */

fragment PackageBodyElement returns SysML::Namespace :
	  ownedRelationship += OwnedDocumentation 
	| ownedRelationship += PackageMember
	| ownedRelationship += ElementFilterMember
	| ownedRelationship += AliasMember
	| ownedRelationship += Import
;

fragment MemberPrefix returns SysML::Membership :
	( ownedRelationship += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
;

PackageMember returns SysML::Membership : 
	MemberPrefix		
	( ownedRelatedElement += DefinitionElement //ownedMemberElement = DefinitionElement 
	| ownedRelatedElement += UsageElement // ownedMemberElement = UsageElement
	)
;

ElementFilterMember returns SysML::ElementFilterMembership :
	MemberPrefix
	'filter' ownedRelatedElement += OwnedExpression ';' // condition = OwnedExpression ';'
;

AliasMember returns SysML::Membership :
	MemberPrefix
	'alias' memberName = Name 'for' memberElement = [SysML::Element|QualifiedName] ';'
;

Import returns SysML::Import :
	( ownedRelationship += PrefixDocumentation )*
	( visibility = VisibilityIndicator )?  
	'import' ( isImportAll ?= 'all' )?
	( ImportedNamespace | ImportedFilterPackage ) ';'
;

fragment ImportedNamespace returns SysML::Import :
	( importedNamespace = [SysML::Namespace|Qualification] )?
	( importedMemberName = Name | '*' )
	( '::' isRecursive ?= '**' )?
;

fragment ImportedFilterPackage returns SysML::Import :
	ownedRelatedElement += FilterPackage
;

FilterPackage returns SysML::Package :
	ownedRelationship += FilterPackageImport
	( ownedRelationship += FilterPackageMember )+
;

FilterPackageImport returns SysML::Import :
	ImportedNamespace
;

FilterPackageMember returns SysML::ElementFilterMembership :
	visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']' // condition = OwnedExpression ']'
;

enum FilterPackageMemberVisibility returns SysML::VisibilityKind :
	private = '['
;

enum VisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'| protected = 'protected'
;

/* Package Elements */

DefinitionElement returns SysML::Element :
	  Package
	| Comment
	| TextualRepresentation
	| AnnotatingFeature
	| Dependency	  
	| AttributeDefinition
	| EnumerationDefinition
	| OccurrenceDefinition
	| IndividualDefinition
	| ItemDefinition
	| PartDefinition
	| ConnectionDefinition
	| InterfaceDefinition
	| AllocationDefinition
	| PortDefinition
	| ActionDefinition
	| CalculationDefinition
	| StateDefinition
	| ConstraintDefinition
	| RequirementDefinition
	| ConcernDefinition
	| CaseDefinition
	| AnalysisCaseDefinition
	| VerificationCaseDefinition
	| UseCaseDefinition
	| ViewDefinition
	| ViewpointDefinition
	| RenderingDefinition
;
	
UsageElement returns SysML::Usage :
	  NonOccurrenceUsageElement 
	| OccurrenceUsageElement
;

/* CLASSIFIERS */

/* Superclassing */

fragment SubclassificationPart returns SysML::Classifier :
	SpecializesKeyword ownedRelationship += OwnedSubclassification 
	( ',' ownedRelationship += OwnedSubclassification )*
;

SpecializesKeyword :
	':>' | 'specializes'
;

OwnedSubclassification returns SysML::Subclassification:
	superclassifier = [SysML::Classifier | QualifiedName]
;

/* FEATURES */

/* Features */

fragment FeatureDeclaration returns SysML::Feature :
	  Identification FeatureSpecializationPart?
	| FeatureSpecializationPart
;

fragment FeatureSpecializationPart returns SysML::Feature :
	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	| MultiplicityPart FeatureSpecialization*
;

fragment MultiplicityPart returns SysML::Feature :
	  ownedRelationship += OwnedMultiplicity 
	| ( ownedRelationship += OwnedMultiplicity )?
	  ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
	  | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
	  )
;

fragment FeatureSpecialization returns SysML::Feature :
	Typings | Subsettings | Redefinitions
;

fragment Typings returns SysML::Feature :
	TypedBy ( ',' ownedRelationship += FeatureTyping )*
;

fragment TypedBy returns SysML::Feature :
	DefinedByKeyword ownedRelationship += FeatureTyping
;

DefinedByKeyword :
	':' | 'defined' 'by'
;

fragment Subsettings returns SysML::Feature :
	Subsets ( ',' ownedRelationship += OwnedSubsetting )*
;

fragment Subsets returns SysML::Feature :
	SubsetsKeyword ownedRelationship += OwnedSubsetting 
;

SubsetsKeyword :
	':>' | 'subsets'
;

fragment Redefinitions returns SysML::Feature :
	Redefines ( ',' ownedRelationship += OwnedRedefinition )*
;

fragment Redefines returns SysML::Feature :
	RedefinesKeyword ownedRelationship += OwnedRedefinition
;

RedefinesKeyword :
	':>>' | 'redefines'
;

/* Feature Typing, Subsetting and Redefinition */

FeatureTyping returns SysML::FeatureTyping :
	OwnedFeatureTyping | ConjugatedPortTyping
;

// OwnedFeatureTyping inherited from Expression syntax.

OwnedSubsetting returns SysML::Subsetting:
	  subsettedFeature = [SysML::Feature|QualifiedName]
	| ownedRelatedElement += FeatureChain
;

OwnedRedefinition returns SysML::Redefinition:
	  redefinedFeature = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += FeatureChain
;

/* Multiplicity */

OwnedMultiplicity returns SysML::Membership :
	ownedRelatedElement += MultiplicityRange // ownedMemberElement = Multiplicity
;

MultiplicityRange returns SysML::MultiplicityRange :
	// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
	'[' ownedRelationship += MultiplicityExpressionMember
	      ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
;

MultiplicityExpressionMember returns SysML::Membership :
	ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression ) // ownedMemberElement = ( LiteralExpression | FeatureReferenceExpression )
;

/* DEPENDENCIES */

Dependency returns SysML::Dependency :
	'dependency' ( Identification? 'from' )?
    client += [SysML::Element|QualifiedName] ( ',' client += [SysML::Element|QualifiedName] )* 'to'
    supplier += [SysML::Element|QualifiedName] ( ',' supplier += [SysML::Element|QualifiedName] )* ';'
;

/* DEFINITION AND USAGE */

/* Definitions */

fragment DefinitionPrefix returns SysML::Definition :
	isAbstract ?= 'abstract' | isVariation ?= 'variation'
;

fragment Definition returns SysML::Definition :
	DefinitionDeclaration DefinitionBody
;

fragment DefinitionDeclaration returns SysML::Definition :	
	Identification? SubclassificationPart?
;

fragment DefinitionBody returns SysML::Type :
	  ';' 
	| '{' DefinitionBodyItem* '}'
;

fragment DefinitionBodyItem returns SysML::Type :
	  ownedRelationship += OwnedDocumentation 
	| ownedRelationship += DefinitionMember 
	| ownedRelationship += VariantUsageMember
	| ownedRelationship += NonOccurrenceUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += OccurrenceUsageMember	
	| ownedRelationship += AliasMember
	| => ownedRelationship += Import
;

DefinitionMember returns SysML::Membership : 
	MemberPrefix 
	ownedRelatedElement += DefinitionElement //ownedMemberElement = DefinitionElement
;

VariantUsageMember returns SysML::VariantMembership :
	MemberPrefix 'variant' 
	ownedRelatedElement += VariantUsageElement // ownedVariantUsage = VariantUsageElement
;

NonOccurrenceUsageMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += NonOccurrenceUsageElement // ownedMemberFeature = NonOccurrenceUsageElement
;

OccurrenceUsageMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += OccurrenceUsageElement // ownedMemberFeature = OccurrenceUsageElement
;

StructureUsageMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += StructureUsageElement // ownedMemberFeature = StructureUsageElement
;

BehaviorUsageMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += BehaviorUsageElement // ownedMemberFeature = BehaviorUsageElement
;

/* Usages */

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

fragment RefPrefix returns SysML::Usage :
	( direction = FeatureDirection )?
	( isAbstract ?= 'abstract' | isVariation ?= 'variation')?
	( isReadOnly ?= 'readonly' )?
	( isDerived ?= 'derived' )?
	( isEnd ?= 'end' )?	
;

fragment UsagePrefix returns SysML::Usage :
	RefPrefix
	( isReference ?= 'ref' )?
;

fragment Usage returns SysML::Usage :
	UsageDeclaration? UsageCompletion
;

fragment UsageDeclaration returns SysML::Feature :
	  FeatureDeclaration
;

fragment UsageCompletion returns SysML::Usage :
	ValueOrFlowPart? UsageBody
;

fragment UsageBody returns SysML::Usage :
	DefinitionBody
;

fragment ValueOrFlowPart returns SysML::Feature :
	ValuePart | ownedRelationship += SourceItemFlowMember
;

fragment ValuePart returns SysML::Feature :
	  ownedRelationship += FeatureValue
	| ownedRelationship += FeatureValueExpression
	  ownedRelationship += EmptyAssignmentActionMember
;

FeatureValue returns SysML::FeatureValue :
	( '=' | isDefault ?= 'default' ( '=' | isInitial ?= ':=' )? )
	ownedRelatedElement += OwnedExpression // value = OwnedExpression
;

FeatureValueExpression returns SysML::FeatureValue :
	isInitial ?= ':='
	ownedRelatedElement += OwnedExpression // value = OwnedExpression
;

EmptyAssignmentActionMember returns SysML::Membership :
	ownedRelatedElement += EmptyAssignmentAction // ownedMemberElement = EmptyAssignmentAction
;

EmptyAssignmentAction returns SysML::AssignmentActionUsage :
	ownedRelationship += EmptyTargetMember
	ownedRelationship += EmptyParameterMember
;

EmptyTargetMember returns SysML::ParameterMembership :
	ownedRelatedElement += EmptyTargetParameter // ownedMemberParameter = TargetParameter
;

EmptyTargetParameter returns SysML::ReferenceUsage :
	ownedRelationship += TargetFeatureMember
;

SourceItemFlowMember returns SysML::Membership :
	ownedRelatedElement += SourceItemFlow // ownedMemberElement = SourceItemFlow
;

SourceItemFlow returns SysML::FlowConnectionUsage :
	( FlowConnectionKeyword 
	| {SysML::SuccessionFlowConnectionUsage} SuccessionFlowConnectionKeyword
	) 
	ownedRelationship += EmptyItemFeatureMember 
	'from' ownedRelationship += ItemFlowEndMember
	ownedRelationship += EmptyItemFlowEndMember
;

/* Reference Usages */

ReferenceKeyword :
	'ref'
;

ReferenceUsageKeyword :
	ReferenceKeyword
;

DefaultReferenceUsage returns SysML::ReferenceUsage :
	RefPrefix UsageDeclaration ValueOrFlowPart? UsageBody
;

ReferenceUsage returns SysML::ReferenceUsage :
	RefPrefix ReferenceUsageKeyword Usage
;

// TODO: Find a better way to handle variant references than using ReferenceUsage.
VariantReference returns SysML::ReferenceUsage :
	ownedRelationship += OwnedSubsetting 
	FeatureSpecialization* UsageBody
;

/* Body Elements */

NonOccurrenceUsageElement returns SysML::Usage :
	  DefaultReferenceUsage
	| ReferenceUsage
	| AttributeUsage
	| EnumerationUsage
	| BindingConnector
	| Succession
;

OccurrenceUsageElement returns SysML::Usage :
	StructureUsageElement | BehaviorUsageElement
;

StructureUsageElement returns SysML::Usage :
	  OccurrenceUsage
	| IndividualUsage
	| PortionUsage
	| EventOccurrenceUsage
	| ItemUsage
	| PartUsage
	| ViewUsage
	| RenderingUsage
	| PortUsage
	| ConnectionUsage
	| InterfaceUsage
	| AllocationUsage
	| Message
	| FlowConnectionUsage
	| SuccessionFlowConnectionUsage
;

BehaviorUsageElement returns SysML::Usage :
	  ActionUsage
	| CalculationUsage
	| StateUsage
	| ConstraintUsage
	| RequirementUsage
	| ConcernUsage
	| CaseUsage
	| AnalysisCaseUsage
	| VerificationCaseUsage
	| UseCaseUsage
	| ViewpointUsage
	| PerformActionUsage
	| ExhibitStateUsage
	| IncludeUseCaseUsage
	| AssertConstraintUsage
	| SatisfyRequirementUsage
;

VariantUsageElement returns SysML::Usage :
	  VariantReference
	| ReferenceUsage
	| AttributeUsage
	| BindingConnector
	| Succession
	| OccurrenceUsage
	| IndividualUsage
	| PortionUsage
	| EventOccurrenceUsage
	| ItemUsage
	| PartUsage
	| ViewUsage
	| RenderingUsage
	| PortUsage
	| ConnectionUsage
	| InterfaceUsage
	| AllocationUsage
	| Message
	| FlowConnectionUsage
	| SuccessionFlowConnectionUsage
	| BehaviorUsageElement
;

/* ATTRIBUTES */

AttributeKeyword :
	'attribute'
;

AttributeDefKeyword :
	AttributeKeyword 'def'
;

AttributeUsageKeyword :
	AttributeKeyword
;

AttributeDefinition returns SysML::AttributeDefinition :
	DefinitionPrefix? AttributeDefKeyword Definition
;

AttributeUsage returns SysML::AttributeUsage :
	UsagePrefix AttributeUsageKeyword Usage
;

/* ENUMERATIONS */

EnumerationKeyword :
	'enum'
;
EnumerationDefKeyword :
	EnumerationKeyword 'def'
;

EnumerationUsageKeyword :
	EnumerationKeyword
;

EnumerationDefinition returns SysML::EnumerationDefinition :
	EnumerationDefKeyword DefinitionDeclaration EnumerationBody
;

fragment EnumerationBody returns SysML::EnumerationDefinition :
	  ';' 
	| '{' ( => ownedRelationship += EnumerationUsageMember )* '}'
;

EnumerationUsageMember returns SysML::VariantMembership :
	MemberPrefix ownedRelatedElement += EnumeratedValue // ownedVariantUsage = EnumeratedValue
;

EnumeratedValue returns SysML::EnumerationUsage :
	EnumerationUsageKeyword? Usage
;

EnumerationUsage returns SysML::EnumerationUsage :
	UsagePrefix EnumerationUsageKeyword Usage
;

/* OCCURRENCES */

/* Occurrence Definitions */

OccurrenceKeyword :
	'occurrence'
;

OccurrenceDefKeyword :
	OccurrenceKeyword 'def'
;

fragment OccurrenceDefinitionPrefix returns SysML::OccurrenceDefinition :
	DefinitionPrefix? 
	( isIndividual ?= 'individual' ownedRelationship += LifeClassMembership )?
;

OccurrenceDefinition returns SysML::OccurrenceDefinition :
	OccurrenceDefinitionPrefix OccurrenceDefKeyword Definition
;

IndividualDefinition returns SysML::OccurrenceDefinition :
	DefinitionPrefix? isIndividual ?= 'individual' 'def' Definition
	ownedRelationship += LifeClassMembership
;

LifeClassMembership returns SysML::Membership :
	ownedRelatedElement += LifeClass // ownedMemberElement = LifeClass
;

LifeClass returns SysML::LifeClass :
	{SysML::LifeClass}
;

/* Occurrence Usages */

OccurrenceUsageKeyword :
	OccurrenceKeyword
;

fragment OccurrenceUsagePrefix returns SysML::OccurrenceUsage :
	  UsagePrefix
	  ( isIndividual ?= 'individual' )?
	  ( portionKind = PortionKind
	    ownedRelationship += PortioningFeatureMember )?
;

OccurrenceUsage returns SysML::OccurrenceUsage :
	OccurrenceUsagePrefix OccurrenceUsageKeyword Usage
;

IndividualUsage returns SysML::OccurrenceUsage :
	UsagePrefix isIndividual ?= 'individual' Usage
;

PortionUsage returns SysML::OccurrenceUsage :
	UsagePrefix ( isIndividual ?= 'individual' )?
	portionKind = PortionKind
	ownedRelationship += PortioningFeatureMember
	Usage
;

enum PortionKind returns SysML::PortionKind :
	// Literal keywords identified explicitly so they can be found by syntax highlighting script
	snapshot = 'snapshot' | timeslice = 'timeslice'
;

PortioningFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += PortioningFeature // ownedMemberFeature = PortioningFeature
;

PortioningFeature returns SysML::PortioningFeature :
	{SysML::PortioningFeature}
;

EventOccurrenceUsage returns SysML::EventOccurrenceUsage :
	 OccurrenceUsagePrefix 'event'
	( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
   	| OccurrenceUsageKeyword UsageDeclaration? )
    UsageCompletion
;

/* Occurrence Succession */

EmptySuccessionMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptySuccession // ownedMemberFeature = EmptySuccession
;

EmptySuccession returns SysML::SuccessionAsUsage :
	'then' ownedRelationship += MultiplicitySourceEndMember 
	ownedRelationship += EmptyTargetEndMember
;

MultiplicitySourceEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += MultiplicitySourceEnd // ownedMemberFeature = MultiplicitySourceEnd
;

MultiplicitySourceEnd returns SysML::Feature :
	{SysML::SourceEnd} ( ownedRelationship += OwnedMultiplicity )?
;

EmptyTargetEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += EmptyTargetEnd // ownedMemberFeature = EmptyTargetEnd
;

EmptyTargetEnd returns SysML::Feature :
	{SysML::TargetEnd}
;

/* ITEMS */

ItemKeyword :
	'item'
;

ItemDefKeyword :
	ItemKeyword 'def'
;

ItemUsageKeyword :
	ItemKeyword
;

ItemDefinition returns SysML::ItemDefinition :
	OccurrenceDefinitionPrefix ItemDefKeyword Definition
;

ItemUsage returns SysML::ItemUsage :
	OccurrenceUsagePrefix ItemUsageKeyword Usage
;

/* PARTS */

PartKeyword :
	'part'
;

PartDefKeyword :
	PartKeyword 'def'
;

PartUsageKeyword :
	PartKeyword
;

PartDefinition returns SysML::PartDefinition :
	OccurrenceDefinitionPrefix PartDefKeyword Definition
;

PartUsage returns SysML::PartUsage :
	OccurrenceUsagePrefix PartUsageKeyword Usage
;

/* PORTS */

/* Port Definitions */

PortKeyword :
	'port'
;

PortDefKeyword :
	PortKeyword 'def'
;

PortDefinition returns SysML::PortDefinition :
	DefinitionPrefix? PortDefKeyword Definition
	ownedRelationship += ConjugatedPortDefinitionMember
;

ConjugatedPortDefinitionMember returns SysML::Membership :
	ownedRelatedElement += ConjugatedPortDefinition // ownedMemberElement = ConjugatedPortDefinition
;

ConjugatedPortDefinition returns SysML::ConjugatedPortDefinition :
	ownedRelationship += PortConjugation
;

PortConjugation returns SysML::PortConjugation :
	{SysML::PortConjugation}
;

ConjugatedPortTyping returns SysML::ConjugatedPortTyping :
	'~' portDefinition = [SysML::PortDefinition | QualifiedName]
;

/* Port Usages */

PortUsageKeyword :
	PortKeyword
;

PortUsage returns SysML::PortUsage :
	OccurrenceUsagePrefix PortUsageKeyword Usage
;

/* CONNECTIONS */

/* Connectors */

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name ':>' )? ownedRelatedElement += ConnectorEnd // ownedMemberFeature = ConnectorEnd
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship += OwnedSubsetting
	( ownedRelationship += OwnedMultiplicity )?
;

/* Binding Connectors */

BindingKeyword :
	'binding'
;

BindingConnector returns SysML::BindingConnectorAsUsage :
	UsagePrefix ( BindingKeyword UsageDeclaration? )?
	'bind' ownedRelationship += ConnectorEndMember 
	'=' ownedRelationship += ConnectorEndMember 
	DefinitionBody	
;

/* Successions */

SuccessionKeyword:
	'succession'
;

Succession returns SysML::SuccessionAsUsage :
	UsagePrefix ( SuccessionKeyword UsageDeclaration? )? 
	'first' ownedRelationship += ConnectorEndMember 
	'then' ownedRelationship += ConnectorEndMember 
	DefinitionBody
;

/* Connection Definitions */

ConnectionKeyword :
	'connection'
;

ConnectionDefKeyword :
	ConnectionKeyword 'def' 
;

ConnectionDefinition returns SysML::ConnectionDefinition :
	OccurrenceDefinitionPrefix ConnectionDefKeyword Definition
;

/* Connection Usages */

ConnectorKeyword :
	'connect'
;

ConnectionUsageKeyword :
	ConnectionKeyword
;

ConnectionUsage returns SysML::ConnectionUsage :	 
	OccurrenceUsagePrefix 
	( ConnectionUsageKeyword UsageDeclaration? 
	  ( ConnectorKeyword ConnectorPart )? 
	| ConnectorKeyword ConnectorPart
	) UsageBody
;

fragment ConnectorPart returns SysML::ConnectionUsage :
	BinaryConnectorPart | NaryConnectorPart
;

fragment BinaryConnectorPart returns SysML::Connector :
	ownedRelationship += ConnectorEndMember 'to' 
	ownedRelationship += ConnectorEndMember
;

fragment NaryConnectorPart returns SysML::Connector :
	'(' ownedRelationship += ConnectorEndMember ',' 
	    ownedRelationship += ConnectorEndMember
	    ( ',' ownedRelationship += ConnectorEndMember )* ')'
;

EmptySourceEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += EmptySourceEnd // ownedMemberFeature = EmptySourceEnd
;

EmptySourceEnd returns SysML::Feature :
	{SysML::SourceEnd}
;

/* FLOW CONNECTIONS */

/* Messages */

MessageKeyword :
	'message'
;

Message returns SysML::FlowConnectionUsage :
	OccurrenceUsagePrefix MessageKeyword MessageDeclaration DefinitionBody
;

fragment MessageDeclaration returns SysML::FlowConnectionUsage :
	FeatureDeclaration? 
    ( 'of'  ownedRelationship += ItemFeatureMember )?
    ( 'from' BinaryConnectorPart | ValuePart )?  
;

/* Flow Connection Usages */

FlowConnectionKeyword :
	'flow'
;

FlowConnectionUsage returns SysML::FlowConnectionUsage :
	OccurrenceUsagePrefix FlowConnectionKeyword 
	FlowConnectionDeclaration DefinitionBody
;

SuccessionFlowConnectionKeyword :
	SuccessionKeyword FlowConnectionKeyword
;

SuccessionFlowConnectionUsage returns SysML::SuccessionFlowConnectionUsage :
	OccurrenceUsagePrefix SuccessionFlowConnectionKeyword 
	FlowConnectionDeclaration DefinitionBody
;

fragment FlowConnectionDeclaration returns SysML::FlowConnectionUsage :
	( FeatureDeclaration? 
      ( 'of'  ownedRelationship += ItemFeatureMember
      | ownedRelationship += EmptyItemFeatureMember
      ) 'from'
    | ownedRelationship += EmptyItemFeatureMember
    )
	ownedRelationship += ItemFlowEndMember 'to' 
	ownedRelationship += ItemFlowEndMember
;

/* Item Flow Members */

ItemFeatureMember returns SysML::FeatureMembership :
	( memberName = Name DefinedByKeyword )? ownedRelatedElement += ItemFeature // ownedMemberFeature = ItemFeature
;

ItemFeature returns SysML::ItemFeature :
	  ownedRelationship += OwnedFeatureTyping 
	  ( ownedRelationship += OwnedMultiplicity )?
	| ownedRelationship += OwnedMultiplicity
	  ( ownedRelationship += OwnedFeatureTyping )?
;

EmptyItemFeature returns SysML::ItemFeature :
	{SysML::ItemFeature}
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += ItemFlowEnd // ownedMemberFeature = ItemFlowEnd
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	( ownedRelationship += ItemFlowEndSubsetting )?
	ownedRelationship += ItemFlowFeatureMember
;

ItemFlowEndSubsetting returns SysML::Subsetting :
	  subsettedFeature = [SysML::Feature | QualifiedName] '.'
	| ownedRelatedElement += FeatureChainPrefix
;

FeatureChainPrefix returns SysML::Feature :
	( ownedRelationship += OwnedFeatureChaining '.' )+
	ownedRelationship += OwnedFeatureChaining '.'
;

EmptyItemFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptyItemFeature // ownedMemberFeature = EmptyItemFeature
;

EmptyItemFlowEnd returns SysML::ItemFlowEnd :
	ownedRelationship += EmptyItemFlowFeatureMember
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += ItemFlowFeature // ownedMemberFeature = ItemFlowFeature
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship += ItemFlowRedefinition
;

ItemFlowRedefinition returns SysML::Redefinition :
	redefinedFeature = [SysML::Feature|QualifiedName]
;

EmptyItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += EmptyItemFlowEnd // ownedMemberFeature = EmptyItemFlowEnd
;

EmptyItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptyItemFlowFeature // ownedMemberFeature = EmptyItemFlowFeature
;

EmptyItemFlowFeature returns SysML::ItemFlowFeature :
	{SysML::ItemFlowFeature}
;

/* INTERFACES */

/* Interface Definitions */

InterfaceKeyword :
	'interface'
;

InterfaceDefKeyword :
	InterfaceKeyword 'def'
;

InterfaceDefinition returns SysML::InterfaceDefinition :
	OccurrenceDefinitionPrefix InterfaceDefKeyword DefinitionDeclaration InterfaceBody
;

fragment InterfaceBody returns SysML::Type :
	  ';' 
	| '{' InterfaceBodyItem* '}'
;

fragment InterfaceBodyItem returns SysML::Type :
	  ownedRelationship += OwnedDocumentation 
	| ownedRelationship += DefinitionMember 
	| ownedRelationship += VariantUsageMember
	| ownedRelationship += InterfaceNonOccurrenceUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += InterfaceOccurrenceUsageMember
	| ownedRelationship += AliasMember
	| => ownedRelationship += Import
;

InterfaceNonOccurrenceUsageMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += InterfaceNonOccurrenceUsageElement // ownedMemberFeature = InterfaceNonOccurrenceUsageElement
;

InterfaceNonOccurrenceUsageElement returns SysML::Feature :
	  ReferenceUsage
	| AttributeUsage
	| EnumerationUsage
	| BindingConnector
	| Succession
;

InterfaceOccurrenceUsageMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += InterfaceOccurrenceUsageElement // ownedMemberFeature = InterfaceOccurrenceUsageElement
;

InterfaceOccurrenceUsageElement returns SysML::Feature :
	DefaultInterfaceEnd | StructureUsageElement | BehaviorUsageElement
;

DefaultInterfaceEnd returns SysML::PortUsage :
	( direction = FeatureDirection )?
	( isAbstract ?= 'abstract' | isVariation ?= 'variation')?
	isEnd ?= 'end' Usage
;

/* Interface Usages */

InterfaceUsageKeyword :
	InterfaceKeyword
;

InterfaceUsage returns SysML::InterfaceUsage :	 
	OccurrenceUsagePrefix InterfaceUsageKeyword InterfaceUsageDeclaration InterfaceBody
;

fragment InterfaceUsageDeclaration returns SysML::InterfaceUsage :
	UsageDeclaration? ( ConnectorKeyword InterfacePart )? | InterfacePart
;

fragment InterfacePart returns SysML::ConnectionUsage :
	BinaryInterfacePart | NaryInterfacePart
;

fragment BinaryInterfacePart returns SysML::Connector :
	ownedRelationship += InterfaceEndMember 'to' 
	ownedRelationship += InterfaceEndMember
;

fragment NaryInterfacePart returns SysML::Connector :
	'(' ownedRelationship += InterfaceEndMember ',' 
	    ownedRelationship += InterfaceEndMember
	    ( ',' ownedRelationship += InterfaceEndMember )* ')'
;

InterfaceEndMember returns SysML::EndFeatureMembership :
	( memberName = Name ':>' )? ownedRelatedElement += InterfaceEnd // ownedMemberFeature = InterfaceEnd
;

InterfaceEnd returns SysML::PortUsage :
	ownedRelationship += OwnedSubsetting
	( ownedRelationship += OwnedMultiplicity )?
;

/* ALLOCATIONS */

/* Allocation Definitions */

AllocationKeyword :
	'allocation'
;

AllocationDefKeyword :
	AllocationKeyword 'def'
;

AllocationDefinition returns SysML::AllocationDefinition :
	OccurrenceDefinitionPrefix AllocationDefKeyword Definition
;

/* AllocationUsage Usages */

AllocationUsageKeyword :
	AllocationKeyword
;

AllocateKeyword :
	'allocate'
;

AllocationUsage returns SysML::AllocationUsage :	 
	OccurrenceUsagePrefix AllocationUsageDeclaration UsageBody
;

fragment AllocationUsageDeclaration returns SysML::AllocationUsage :
	    AllocationUsageKeyword UsageDeclaration? ( AllocateKeyword ConnectorPart )?
	  | AllocateKeyword ConnectorPart
;

/* ACTION */

/* Action Definitions */

ActionKeyword :
	'action'
;

ActionDefKeyword :
	ActionKeyword 'def'
;

ActionDefinition returns SysML::ActionDefinition :
	OccurrenceDefinitionPrefix ActionDefKeyword ActionDeclaration ActionBody
;

fragment ActionDeclaration returns SysML::ActionDefinition :
	DefinitionDeclaration ParameterList? 
;

fragment ParameterList returns SysML::Type :
	'(' ( ownedRelationship += ParameterMember 
		( ',' ownedRelationship += ParameterMember )* )? ')'
;

ParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
;

fragment ActionBody returns SysML::Type :
	    ';' 
		// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		// while incrementally parsing.
	  | '{' => ActionBodyItem* '}' 
;

fragment ActionBodyItem returns SysML::Type :
	  ownedRelationship += OwnedDocumentation
	| ownedRelationship += Import
	| ownedRelationship += AliasMember
	| ownedRelationship += DefinitionMember 
	| ownedRelationship += VariantUsageMember
	| ownedRelationship += NonOccurrenceUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += StructureUsageMember
	| ownedRelationship += InitialNodeMember
	  ( => ownedRelationship += TargetSuccessionMember )*
	| ( ownedRelationship += EmptySuccessionMember )? 
	  ownedRelationship += ( BehaviorUsageMember | ActionNodeMember )
	  ( => ownedRelationship += TargetSuccessionMember )*
	| ownedRelationship += GuardedSuccessionMember
;

InitialNodeMember returns SysML::Membership :
	MemberPrefix 'first' memberElement = [SysML::Feature|QualifiedName] ';'
	
;

ActionNodeMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += ActionNode // ownedMemberFeature = ActionNode
;

TargetSuccessionMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += ActionTargetSuccession ';' // ownedMemberFeature = ActionTargetSuccession ';'
;

GuardedSuccessionMember returns SysML::FeatureMembership :
	ownedRelatedElement += GuardedSuccession ';' // ownedMemberFeature = GuardedSuccession ';'
;

/* Parameters */

Parameter returns SysML::Usage :
      {SysML::ReferenceUsage} ( direction = FeatureDirection )? ( ParameterDeclaration | ReferenceUsageKeyword ParameterDeclaration?)
    | {SysML::AttributeUsage} ( direction = FeatureDirection )? AttributeUsageKeyword ParameterDeclaration?
    | {SysML::OccurrenceUsage} ( direction = FeatureDirection )? OccurrenceUsageKeyword ParameterDeclaration?
    | {SysML::ItemUsage} ( direction = FeatureDirection )? ItemUsageKeyword ParameterDeclaration?
    | {SysML::PartUsage} ( direction = FeatureDirection )? PartUsageKeyword ParameterDeclaration?
    | {SysML::ViewUsage} ( direction = FeatureDirection )? ViewUsageKeyword ParameterDeclaration?
    | {SysML::RenderingUsage} ( direction = FeatureDirection )? RenderingUsageKeyword ParameterDeclaration?
    | {SysML::ActionUsage} ( direction = FeatureDirection )? ActionUsageKeyword ParameterDeclaration?
    | {SysML::CalculationUsage} ( direction = FeatureDirection )? CalculationUsageKeyword ParameterDeclaration?
    | {SysML::StateUsage} ( direction = FeatureDirection )? StateUsageKeyword ParameterDeclaration?
    | {SysML::ConstraintUsage} ( direction = FeatureDirection )? ConstraintUsageKeyword ParameterDeclaration?
    | {SysML::RequirementUsage} ( direction = FeatureDirection )? RequirementUsageKeyword ParameterDeclaration?
    | {SysML::ConcernUsage} ( direction = FeatureDirection )? ConcernUsageKeyword ParameterDeclaration?
    | {SysML::AnalysisCaseUsage} ( direction = FeatureDirection )? AnalysisCaseUsageKeyword ParameterDeclaration?
    | {SysML::VerificationCaseUsage} ( direction = FeatureDirection )? VerificationCaseUsageKeyword ParameterDeclaration?
    | {SysML::UseCaseUsage} ( direction = FeatureDirection )? UseCaseUsageKeyword ParameterDeclaration?
    | {SysML::ViewpointUsage} ( direction = FeatureDirection )? ViewpointUsageKeyword ParameterDeclaration?
;

fragment ParameterDeclaration returns SysML::Usage :
	  Identification ParameterSpecializationPart? 
	| ParameterSpecializationPart
;

fragment ParameterSpecializationPart returns SysML::Feature :
	  ( -> ParameterSpecialization )+ MultiplicityPart? ParameterSpecialization*
	| MultiplicityPart ParameterSpecialization*
;

fragment ParameterSpecialization returns SysML::Feature :
	TypedBy | Subsets | Redefines
;

/* Action Usages */

ActionUsageKeyword :
	ActionKeyword
;

ActionUsage returns SysML::ActionUsage :
	OccurrenceUsagePrefix ActionUsageKeyword ActionUsageDeclaration ActionBody
;

PerformActionUsage returns SysML::PerformActionUsage :
	OccurrenceUsagePrefix 'perform' PerformActionUsageDeclaration ActionBody
;

fragment PerformActionUsageDeclaration returns SysML::ActionUsage :
   	( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
   	| ActionUsageKeyword UsageDeclaration? )
    ( ValuePart | ActionUsageParameterList )?
;

fragment ActionUsageDeclaration returns SysML::Step :
	  UsageDeclaration? ( ValuePart | ActionUsageParameterList )?
;

fragment ActionUsageParameterList returns SysML::Type :
	'(' ( ownedRelationship += ActionUsageParameterMember 
		  ( ',' ownedRelationship += ActionUsageParameterMember )* )? ')'
;

ActionUsageParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += ActionUsageParameter // ownedMemberParameter = ActionUsageParameter
;

ActionUsageParameter returns SysML::Usage :
	Parameter ValueOrFlowPart? | {SysML::ReferenceUsage} ValueOrFlowPart
;

/* Action Nodes */

ActionNode returns SysML::ActionUsage :
	  SendNode | AcceptNode | AssignmentNode 
	| IfNode | WhileLoopNode | ForLoopNode
	| ControlNode
;

fragment ActionNodeUsageDeclaration returns SysML::ActionUsage :
	ActionUsageKeyword UsageDeclaration?
;

fragment ActionNodePrefix returns SysML::ActionUsage :
	OccurrenceUsagePrefix ActionNodeUsageDeclaration?
;

AcceptNode returns SysML::AcceptActionUsage :
	OccurrenceUsagePrefix AcceptNodeDeclaration ActionBody
;

fragment AcceptNodeDeclaration returns SysML::ActionUsage :
	ActionNodeUsageDeclaration? 'accept' AcceptParameterPart
;

fragment AcceptParameterPart returns SysML::ActionUsage :
	ownedRelationship += PayloadParameterMember
	( 'via' ownedRelationship += NodeParameterMember 
	| ownedRelationship += EmptyParameterMember
	)
;

PayloadParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += PayloadParameter // ownedMemberParameter = PayloadParameter
;

PayloadParameter returns SysML::ReferenceUsage :
	  Identification? PayloadParameterSpecializationPart ValueOrFlowPart?
	| Identification? PayloadParameterSpecializationPart? TriggerValuePart
    | ownedRelationship += OwnedFeatureTyping ( ownedRelationship += OwnedMultiplicity )?
    | ownedRelationship += OwnedMultiplicity ownedRelationship += OwnedFeatureTyping
;

fragment PayloadParameterSpecializationPart returns SysML::Feature :
	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	| MultiplicityPart FeatureSpecialization+
;

fragment TriggerValuePart returns SysML::Feature :
	ownedRelationship += TriggerFeatureValue
;

TriggerFeatureValue returns SysML::FeatureValue :
	ownedRelatedElement += TriggerExpression // value = TriggerExpression
;

TriggerExpression returns SysML::TriggerInvocationExpression :
	  kind = TimeTriggerKind
	  ownedRelationship += OwnedExpressionMember
	| kind = ChangeTriggerKind
	  ownedRelationship += ChangeExpressionMember
;

TimeTriggerKind returns SysML::TriggerKind :
	'at' | 'after'
;

ChangeTriggerKind returns SysML::TriggerKind :
	'when'
;

ChangeExpressionMember returns SysML::FeatureMembership :
	ownedRelatedElement += ChangeExpression // ownedFeatureMember = ChangeExpression
;

ChangeExpression returns SysML::Expression :
	ownedRelationship += ChangeResultExpressionMember
;

ChangeResultExpressionMember returns SysML::ResultExpressionMembership :
	ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
;


SendNode returns SysML::SendActionUsage :
	OccurrenceUsagePrefix SendNodeDeclaration ActionBody
;

fragment SendNodeDeclaration returns SysML::ActionUsage :
	ActionNodeUsageDeclaration? 'send' ownedRelationship += NodeParameterMember 
	'to' ownedRelationship += NodeParameterMember
;

NodeParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += NodeParameter // ownedMemberParameter = NodeParameter
;

NodeParameter returns SysML::Usage :
	{SysML::ReferenceUsage} ownedRelationship += FeatureBinding
;

FeatureBinding returns SysML::FeatureValue :
	ownedRelatedElement += OwnedExpression // value = OwnedExpression
;

AssignmentNode returns SysML::AssignmentActionUsage :
	OccurrenceUsagePrefix AssignmentNodeDeclaration ActionBody
;

fragment AssignmentNodeDeclaration returns SysML::ActionUsage :
	ActionNodeUsageDeclaration? 'assign' 
	ownedRelationship += AssignmentTargetMember
	ownedRelationship += FeatureChainMember ':=' 
	ownedRelationship += NodeParameterMember
;

AssignmentTargetMember returns SysML::ParameterMembership :
	ownedRelatedElement += TargetParameter // ownedMemberParameter = TargetParameter
;

TargetParameter returns SysML::ReferenceUsage :
	( => ownedRelationship += TargetBinding '.' )?
	ownedRelationship += TargetFeatureMember
;

TargetFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += TargetFeature // ownedMemberFeature = TargetFeature
;

TargetFeature returns SysML::ReferenceUsage :
	ownedRelationship += TargetAccessedFeatureMember
;

TargetAccessedFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptyUsage // ownedMemberFeature = EmptyUsage
;

TargetBinding returns SysML::FeatureValue :
	ownedRelatedElement += TargetExpression // value = TargetExpression
;

TargetExpression returns SysML::Expression :
	BaseExpression
	( ( {SysML::PathStepExpression.operand += current} '.' 
	    operand += FeatureChainExpression
	  )?
	  ( {SysML::OperatorExpression.operand += current} 
	    operator = '[' operand += SequenceExpression ']'
	  | {SysML::OperatorExpression.operand += current} '->' 
	    ownedRelationship += ReferenceTyping 
	    ( ownedRelationship += ExpressionBodyMember 
	    | ownedRelationship += FunctionReferenceMember 
	    | ArgumentList
	    ) 
	  | {SysML::PathSelectExpression.operand += current} '.'
	    ownedRelationship += ExpressionBodyMember
	  )
	)*
;

IfNode returns SysML::IfActionUsage :
	ActionNodePrefix 
	'if' ownedRelationship += NodeParameterMember
	ownedRelationship += ActionBodyParameterMember
	( 'else' ownedRelationship += ( ActionBodyParameterMember | IfNodeParameterMember ) )?
;

ActionBodyParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += ActionBodyParameter // ownedMemberParameter = ActionBodyParameter
;

ActionBodyParameter returns SysML::ActionUsage :
	{SysML::ActionUsage} ( ActionUsageKeyword UsageDeclaration? )? '{' => ActionBodyItem* '}'
;

IfNodeParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += IfNode // ownedMemberParameter = IfNode
;

WhileLoopNode returns SysML::WhileLoopActionUsage :
	ActionNodePrefix
	( 'while' ownedRelationship += ExpressionParameterMember
	| 'loop' ownedRelationship += EmptyParameterMember
	)
	ownedRelationship += ActionBodyParameterMember
	( 'until' ownedRelationship += ExpressionParameterMember ';' )?
;

ExpressionParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += OwnedExpression // ownedMemberParameter = OwnedExpression
;

ForLoopNode returns SysML::ForLoopActionUsage :
	ActionNodePrefix
	'for' ownedRelationship += ForVariableDeclarationMember
	'in' ownedRelationship += NodeParameterMember
	ownedRelationship += ActionBodyParameterMember
;


ForVariableDeclarationMember returns SysML::FeatureMembership :
	ownedRelatedElement += ForVariableDeclaration // ownedMemberFeature = UsageDeclaration
;


ForVariableDeclaration returns SysML::ReferenceUsage :
	UsageDeclaration
;

ControlNode returns SysML::ControlNode :
	  MergeNode
	| DecisionNode
	| JoinNode
	| ForkNode
;

fragment ControlNodePrefix returns SysML::OccurrenceUsage :
	  RefPrefix
	  ( isIndividual ?= 'individual' )?
	  ( portionKind = PortionKind
	    ownedRelationship += PortioningFeatureMember )?
;

MergeNode returns SysML::MergeNode :
	ControlNodePrefix 'merge' UsageDeclaration? ';'
;

DecisionNode returns SysML::DecisionNode :
	ControlNodePrefix 'decide' UsageDeclaration? ';'
;

JoinNode returns SysML::JoinNode :
	ControlNodePrefix 'join' UsageDeclaration? ';'
;

ForkNode returns SysML::ForkNode :
	ControlNodePrefix 'fork' UsageDeclaration? ';'
;

EmptyParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += EmptyUsage // ownedMemberParameter = EmptyParameter
;

EmptyUsage returns SysML::Usage :
	{SysML::ReferenceUsage}
;

/* Action Succession */

ActionTargetSuccession returns SysML::Feature :
	TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession
;

TargetSuccession returns SysML::SuccessionAsUsage :
	'then' ownedRelationship += MultiplicitySourceEndMember 
	ownedRelationship += ConnectorEndMember
;

GuardedTargetSuccession returns SysML::TransitionUsage :
	ownedRelationship += EmptyParameterMember
	ownedRelationship += GuardExpressionMember
	'then' ownedRelationship += TransitionSuccessionMember
;

DefaultTargetSuccession returns SysML::TransitionUsage :
	ownedRelationship += EmptyParameterMember
	'else' ownedRelationship += TransitionSuccessionMember
;

GuardedSuccession returns SysML::TransitionUsage :
	( SuccessionKeyword UsageDeclaration )? 'first'
	ownedRelationship += TransitionSourceMember 
	ownedRelationship += EmptyParameterMember
	ownedRelationship += GuardExpressionMember
	'then' ownedRelationship += TransitionSuccessionMember
;

/* STATES */

/* State Definitions */

StateKeyword :
	'state'
;

StateDefKeyword :
	StateKeyword 'def'
;

StateDefinition returns SysML::StateDefinition :
	OccurrenceDefinitionPrefix
	StateDefKeyword ActionDeclaration StateDefBody
;

fragment StateDefBody returns SysML::StateDefinition :
	';' | ( isParallel ?= 'parallel' )? '{' StateBodyPart '}'
;

fragment StateBodyPart returns SysML::Type :
	// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
	// while incrementally parsing.
	=> StateBodyItem*
;

fragment StateBodyItem returns SysML::Type :
	  ownedRelationship += OwnedDocumentation
	| ownedRelationship += Import
	| ownedRelationship += AliasMember
	| ownedRelationship += DefinitionMember 
	| ownedRelationship += VariantUsageMember
	| ownedRelationship += NonOccurrenceUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += StructureUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += BehaviorUsageMember
	  ( ownedRelationship += TargetTransitionUsageMember )*
	| ownedRelationship += TransitionUsageMember
	| ownedRelationship += EntryActionMember
	  ( ownedRelationship += EntryTransitionMember )*
	| ownedRelationship += DoActionMember
	| ownedRelationship += ExitActionMember	
;

EntryActionMember returns SysML::StateSubactionMembership :
	MemberPrefix kind = EntryActionKind ownedRelatedElement += StateActionUsage // ownedMemberFeature = StateActionUsage
;

EntryActionKind returns SysML::StateSubactionKind :
	'entry'
;

DoActionMember returns SysML::StateSubactionMembership :
	MemberPrefix kind = DoActionKind ownedRelatedElement += StateActionUsage // ownedMemberFeature = StateActionUsage
;

DoActionKind returns SysML::StateSubactionKind :
	'do'
;

ExitActionMember returns SysML::StateSubactionMembership :
	MemberPrefix kind = ExitActionKind ownedRelatedElement += StateActionUsage // ownedMemberFeature = StateActionUsage
;

ExitActionKind returns SysML::StateSubactionKind :
	'exit'
;

EntryTransitionMember returns SysML::FeatureMembership :
	MemberPrefix 
	( ownedRelatedElement += GuardedTargetSuccession // ownedMemberFeature = GuardedTargetSuccession 
	| 'then' ownedRelatedElement += TransitionSuccession // ownedMemberFeature = TransitionSuccession
	) ';'
;

StateActionUsage returns SysML::ActionUsage :
	EmptyActionUsage ';' | PerformedActionUsage ActionBody
;

EmptyActionUsage returns SysML::ActionUsage :
	{SysML::ActionUsage}
;

PerformedActionUsage returns SysML::ActionUsage :
	  {SysML::PerformActionUsage} PerformActionUsageDeclaration 
	| {SysML::AcceptActionUsage} AcceptNodeDeclaration 
	| {SysML::SendActionUsage} SendNodeDeclaration
	| {SysML::AssignmentActionUsage} AssignmentNodeDeclaration
;

TransitionUsageMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += TransitionUsage ';' // ownedMemberFeature = TransitionUsage ';'
;

TargetTransitionUsageMember returns SysML::FeatureMembership :
	MemberPrefix ownedRelatedElement += TargetTransitionUsage ';' // ownedMemberFeature = TargetTransitionUsage ';'
;

/* State Usages */

StateUsageKeyword :
	StateKeyword
;

StateUsage returns SysML::StateUsage :
	OccurrenceUsagePrefix StateUsageKeyword ActionUsageDeclaration StateUsageBody
;

fragment StateUsageBody returns SysML::StateUsage :
	';' | ( isParallel ?= 'parallel' )? '{' StateBodyPart '}'
;

ExhibitStateUsage returns SysML::ExhibitStateUsage :
    OccurrenceUsagePrefix 'exhibit' 
    ( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
    | StateUsageKeyword UsageDeclaration?
    )
    ( ValuePart | ActionUsageParameterList )? StateUsageBody
;

/* Transition Usages */

TransitionUsageKeyword :
	'transition'
;

TransitionUsage returns SysML::TransitionUsage :
	TransitionUsageKeyword ( UsageDeclaration? 'first' )? 
	ownedRelationship += TransitionSourceMember
	ownedRelationship += EmptyParameterMember
	( ownedRelationship += EmptyParameterMember 
	  ownedRelationship += TriggerActionMember )?
	( ownedRelationship += GuardExpressionMember )?
	( ownedRelationship += EffectBehaviorMember )?
	'then' ownedRelationship += TransitionSuccessionMember
;

TargetTransitionUsage returns SysML::TransitionUsage :
	ownedRelationship += EmptyParameterMember
	( TransitionUsageKeyword
	  ( ownedRelationship += EmptyParameterMember 
	    ownedRelationship += TriggerActionMember )?
	  ( ownedRelationship += GuardExpressionMember )?
	  ( ownedRelationship += EffectBehaviorMember )?
	| ownedRelationship += EmptyParameterMember 
	  ownedRelationship += TriggerActionMember
	  ( ownedRelationship += GuardExpressionMember )?
	  ( ownedRelationship += EffectBehaviorMember )?
	| ownedRelationship += GuardExpressionMember
	  ( ownedRelationship += EffectBehaviorMember )?
	)?
	'then' ownedRelationship += TransitionSuccessionMember
;

TransitionSourceMember returns SysML::Membership :
	  memberElement = [SysML::Feature|QualifiedName]
	| ownedRelatedElement += FeatureChain
;

TriggerActionMember returns SysML::TransitionFeatureMembership :
	kind = TriggerFeatureKind ownedRelatedElement += TriggerAction // ownedMemberFeature = TriggerAction
;

enum TriggerFeatureKind returns SysML::TransitionFeatureKind :
	trigger = 'accept'
;

TriggerAction returns SysML::AcceptActionUsage :
	AcceptParameterPart
;

GuardExpressionMember returns SysML::TransitionFeatureMembership :
	kind = GuardFeatureKind ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
;

enum GuardFeatureKind returns SysML::TransitionFeatureKind :
	guard = 'if'
;

EffectBehaviorMember returns SysML::TransitionFeatureMembership :
	kind = EffectFeatureKind ownedRelatedElement += EffectBehaviorUsage // ownedMemberFeature = EffectBehaviorUsage
;

enum EffectFeatureKind returns SysML::TransitionFeatureKind :
	effect = 'do'
;

EffectBehaviorUsage returns SysML::ActionUsage :
	  EmptyActionUsage | PerformedActionUsage ( '{' ActionBodyItem* '}' )?
;

TransitionSuccessionMember returns SysML::Membership :
	ownedRelatedElement += TransitionSuccession // ownedMemberElement = TransitionSuccession
;

TransitionSuccession returns SysML::SuccessionAsUsage :
	ownedRelationship += EmptySourceEndMember 
	ownedRelationship += ConnectorEndMember
;

/* CALCULATIONS */

/* Calculation Definitions */

CalculationKeyword :
	'calc'
;

CalculationDefKeyword :
	CalculationKeyword 'def'
;

CalculationDefinition returns SysML::CalculationDefinition :
	OccurrenceDefinitionPrefix CalculationDefKeyword CalculationDeclaration 
	( CalculationBody 
	| '=' ownedRelationship += ResultExpressionMember ';'
	)
;

fragment CalculationDeclaration returns SysML::CalculationDefinition :
	DefinitionDeclaration ( ParameterList ReturnParameterPart? )?
;

fragment ReturnParameterPart returns SysML::Type :
	ownedRelationship += ReturnParameterMember
;

ReturnParameterMember returns SysML::ReturnParameterMembership :
	'return'? ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
;

fragment CalculationBody returns SysML::Type :
	    ';' 
	  | '{' => CalculationBodyItem*
	        ( ownedRelationship += ResultExpressionMember )?
	    '}' 
;

fragment CalculationBodyItem returns SysML::Type :
	  ActionBodyItem
	| ownedRelationship += ReturnParameterFlowUsageMember
;

ReturnParameterFlowUsageMember returns SysML::ReturnParameterMembership :
	MemberPrefix 'return' 
	ownedRelatedElement += UsageElement // ownedMemberParameter = UsageElement
;

@Override
ResultExpressionMember returns SysML::ResultExpressionMembership :
	MemberPrefix ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
;

/* Calculation Usages */

CalculationUsageKeyword :
	CalculationKeyword
;

CalculationUsage returns SysML::CalculationUsage :
	OccurrenceUsagePrefix CalculationUsageKeyword CalculationUsageDeclaration CalculationBody
;

fragment CalculationUsageDeclaration returns SysML::Step :
	  UsageDeclaration? ( ValuePart | CalculationUsageParameterPart )?
;

fragment CalculationUsageParameterPart returns SysML::Feature :
	  ActionUsageParameterList CalculationReturnParameterPart?
;

fragment CalculationReturnParameterPart returns SysML::Feature :
	ownedRelationship += CalculationReturnParameterMember
;

CalculationReturnParameterMember returns SysML::ReturnParameterMembership :
	'return'? ownedRelatedElement += ActionUsageParameter // ownedMemberParameter = ActionUsageParameter
;

/* CONSTRAINTS */

/* Constraint Definitions */

ConstraintKeyword :
	'constraint'
;

ConstraintDefKeyword :
	ConstraintKeyword 'def'
;

ConstraintDefinition returns SysML::ConstraintDefinition :
	OccurrenceDefinitionPrefix ConstraintDefKeyword ConstraintDeclaration CalculationBody  
;

fragment ConstraintDeclaration returns SysML::ConstraintDefinition :
	DefinitionDeclaration ParameterList? EmptyReturnParameterPart
;

fragment EmptyReturnParameterPart returns SysML::Type :
	ownedRelationship += EmptyReturnParameterMember
;

EmptyReturnParameterMember returns SysML::ReturnParameterMembership :
	ownedRelatedElement += EmptyUsage // ownedMemberParameter = EmptyParameter
;

/* Constraint Usages */

ConstraintUsageKeyword :
	ConstraintKeyword
;

ConstraintUsage returns SysML::ConstraintUsage :
	OccurrenceUsagePrefix ConstraintUsageKeyword CalculationUsageDeclaration CalculationBody
;

AssertConstraintUsage returns SysML::AssertConstraintUsage :
	OccurrenceUsagePrefix 'assert' ( isNegated ?= 'not' )?
    ( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
    | ConstraintUsageKeyword UsageDeclaration? 
    )
    CalculationUsageParameterPart? CalculationBody
;

/* REQUIREMENTS */

/* Requirement Definitions */

RequirementKeyword :
	'requirement'
;

RequirementDefKeyword :
	RequirementKeyword 'def'
;

RequirementDefinition returns SysML::RequirementDefinition :
	OccurrenceDefinitionPrefix RequirementDefKeyword ConstraintDeclaration RequirementBody  
;

fragment RequirementBody returns SysML::Type :
	  ';' | '{' => RequirementBodyItem* '}'
;

fragment RequirementBodyItem returns SysML::Type :
	  DefinitionBodyItem
	| ownedRelationship += SubjectMember
	| ownedRelationship += RequirementConstraintMember
	| ownedRelationship += FramedConcernMember
	| ownedRelationship += RequirementVerificationMember
	| ownedRelationship += ActorMember
	| ownedRelationship += StakeholderMember
;

SubjectMember returns SysML::SubjectMembership :
	MemberPrefix ownedRelatedElement += SubjectUsage // ownedSubjectParameter = SubjectUsage
;

SubjectUsage returns SysML::ReferenceUsage :
	'subject' Usage
;

RequirementConstraintMember returns SysML::RequirementConstraintMembership :
	MemberPrefix kind = RequirementConstraintKind 
	ownedRelatedElement += RequirementConstraintUsage // ownedMemberFeature = RequirementConstraintUsage
;

enum RequirementConstraintKind returns SysML::RequirementConstraintKind :
	assumption = 'assume' | requirement = 'require'
;

RequirementConstraintUsage returns SysML::ConstraintUsage :
      ownedRelationship += OwnedSubsetting FeatureSpecialization* 
      CalculationUsageParameterPart? RequirementBody
    | 'constraint' CalculationUsageDeclaration CalculationBody
;

FramedConcernMember returns SysML::FramedConcernMembership :
	MemberPrefix kind = FramedConcernKind 
	ownedRelatedElement += FramedConcernUsage // ownedMemberFeature = AddressedConcernUsage
;

enum FramedConcernKind returns SysML::RequirementConstraintKind :
	requirement = 'frame'
;

FramedConcernUsage returns SysML::ConcernUsage :
      ownedRelationship += OwnedSubsetting FeatureSpecialization* 
      CalculationUsageParameterPart? RequirementBody
    | ConcernUsageKeyword CalculationUsageDeclaration CalculationBody
;

ActorMember returns SysML::ActorMembership :
	MemberPrefix
	ownedRelatedElement += ActorUsage // ownedStakeholderParameter = ActorUsage
;

ActorUsage returns SysML::PartUsage :
      'actor' Usage
;

StakeholderMember returns SysML::StakeholderMembership :
	MemberPrefix
	ownedRelatedElement += StakeholderUsage // ownedStakeholderParameter = StakeholderUsage
;

StakeholderUsage returns SysML::PartUsage :
      'stakeholder' Usage
;

/* Requirement Usages */

RequirementUsageKeyword :
	RequirementKeyword
;

RequirementUsage returns SysML::RequirementUsage :
	OccurrenceUsagePrefix RequirementUsageKeyword CalculationUsageDeclaration RequirementBody
;

SatisfyRequirementUsage returns SysML::SatisfyRequirementUsage :
	OccurrenceUsagePrefix 'assert'? ( isNegated ?= 'not' )? 'satisfy' 
	( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
    | RequirementUsageKeyword UsageDeclaration? 
    )
    ( ValuePart | ActionUsageParameterList )?
    ( 'by' ownedRelationship += SatisfactionSubjectMember )?
     RequirementBody
;

SatisfactionSubjectMember returns SysML::SubjectMembership :
	ownedRelatedElement += SatisfactionParameter // ownedMemberParameter = SatisfactionParameter
;

SatisfactionParameter returns SysML::ReferenceUsage :
	ownedRelationship += SatisfactionFeatureValue
;

SatisfactionFeatureValue returns SysML::FeatureValue :
	ownedRelatedElement += SatisfactionReferenceExpression // value = SatisfactionFeature
;

SatisfactionReferenceExpression returns SysML::Expression :
	  FeatureReferenceExpression 
	  ( '.' {SysML::PathStepExpression.operand += current} operand += FeatureReferenceExpression )*
;

/* CONCERNS */

/* Concern Definitions */

ConcernKeyword :
	'concern'
;

ConcernDefKeyword :
	ConcernKeyword 'def'
;

ConcernDefinition returns SysML::ConcernDefinition :
	OccurrenceDefinitionPrefix ConcernDefKeyword ConstraintDeclaration RequirementBody  
;


ConcernUsageKeyword :
	ConcernKeyword
;

ConcernUsage returns SysML::ConcernUsage :
	OccurrenceUsagePrefix ConcernUsageKeyword CalculationUsageDeclaration RequirementBody
;

/* CASES */

/* Case Definitions */

CaseKeyword :
	'case'
;

CaseDefKeyword :
	CaseKeyword 'def'
;

CaseDefinition returns SysML::CaseDefinition :
	OccurrenceDefinitionPrefix CaseDefKeyword CalculationDeclaration CaseBody
;

fragment CaseBody returns SysML::Type :
	    ';' 
	  | '{' => CaseBodyItem*
	        ( ownedRelationship += ResultExpressionMember )?
	    '}' 
;

fragment CaseBodyItem returns SysML::Type :
	  CalculationBodyItem
	| ownedRelationship += SubjectMember 
	| ownedRelationship += ActorMember
	| ownedRelationship += ObjectiveMember
	
;

ObjectiveMember returns SysML::ObjectiveMembership :
	MemberPrefix 'objective' ownedRelatedElement += ObjectiveRequirementUsage // ownedObjectiveRequirement = ObjectiveRequirementUsage
;

ObjectiveRequirementUsage returns SysML::RequirementUsage :
	CalculationUsageDeclaration RequirementBody
;

/* Case Usages */

CaseUsageKeyword :
	CaseKeyword
;

CaseUsage returns SysML::CaseUsage :
	OccurrenceUsagePrefix CaseUsageKeyword CalculationUsageDeclaration CaseBody
;

/* ANALYSIS CASES */

AnalysisCaseKeyword :
	'analysis'
;

AnalysisCaseDefKeyword :
	AnalysisCaseKeyword 'def'
;

AnalysisCaseUsageKeyword :
	AnalysisCaseKeyword
;

AnalysisCaseDefinition returns SysML::AnalysisCaseDefinition :
	OccurrenceDefinitionPrefix AnalysisCaseDefKeyword CalculationDeclaration CaseBody
;

AnalysisCaseUsage returns SysML::AnalysisCaseUsage :
	OccurrenceUsagePrefix AnalysisCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

/* VERIFICATION CASES */

VerificationCaseKeyword :
	'verification'
;

VerificationCaseDefKeyword :
	VerificationCaseKeyword 'def'
;

VerificationCaseUsageKeyword :
	VerificationCaseKeyword
;

VerificationCaseDefinition returns SysML::VerificationCaseDefinition :
	OccurrenceDefinitionPrefix VerificationCaseDefKeyword CalculationDeclaration CaseBody
;

VerificationCaseUsage returns SysML::VerificationCaseUsage :
	OccurrenceUsagePrefix VerificationCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

RequirementVerificationMember returns SysML::RequirementVerificationMembership :
	MemberPrefix kind = RequirementVerificationKind 
	ownedRelatedElement += RequirementVerificationUsage // ownedRequirement = RequirementVerificationUsage
;

enum RequirementVerificationKind returns SysML::RequirementConstraintKind :
	requirement = 'verify'
;

RequirementVerificationUsage returns SysML::RequirementUsage :
      ownedRelationship += OwnedSubsetting FeatureSpecialization* 
      CalculationUsageParameterPart? RequirementBody
    | 'requirement' CalculationUsageDeclaration RequirementBody
;

/* USE CASES */

UseCaseKeyword :
	'use' 'case'
;

UseCaseDefKeyword :
	UseCaseKeyword 'def'
;

UseCaseUsageKeyword :
	UseCaseKeyword
;

UseCaseDefinition returns SysML::UseCaseDefinition :
	OccurrenceDefinitionPrefix UseCaseDefKeyword CalculationDeclaration CaseBody
;

UseCaseUsage returns SysML::UseCaseUsage :
	OccurrenceUsagePrefix UseCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

IncludeUseCaseUsage returns SysML::IncludeUseCaseUsage :
	OccurrenceUsagePrefix 'include' 
   	( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
   	| UseCaseUsageKeyword UsageDeclaration? )
    ( ValuePart | ActionUsageParameterList )?
	CaseBody
;

/* VIEWS */

/* View Definitions */

ViewKeyword :
	'view'
;

ViewDefKeyword :
	ViewKeyword 'def'
;

ViewDefinition returns SysML::ViewDefinition :
	OccurrenceDefinitionPrefix ViewDefKeyword DefinitionDeclaration ViewDefinitionBody
;

fragment ViewDefinitionBody returns SysML::ViewDefinition :
	  ';' 
	| '{' ViewDefinitionBodyItem* '}'
;

fragment ViewDefinitionBodyItem returns SysML::ViewDefinition :
	  DefinitionBodyItem
	| ownedRelationship += ElementFilterMember
	| ownedRelationship += ViewRenderingMember
;

ViewRenderingMember returns SysML::ViewRenderingMembership :
	MemberPrefix 'render' 
	ownedRelatedElement += ViewRenderingUsage // ownedRendering = ViewRenderingUsage
;

ViewRenderingUsage returns SysML::RenderingUsage :
	 ownedRelationship += OwnedSubsetting FeatureSpecialization* UsageBody
;

/* View Usages */

ViewUsageKeyword :
	ViewKeyword
;

ViewUsage returns SysML::ViewUsage :
	OccurrenceUsagePrefix ViewUsageKeyword UsageDeclaration? ValueOrFlowPart? ViewBody
;

fragment ViewBody returns SysML::ViewUsage :
	';' | '{' ViewBodyItem* '}'
;

fragment ViewBodyItem returns SysML::ViewUsage :
	  DefinitionBodyItem
	| ownedRelationship += ElementFilterMember
	| ownedRelationship += Expose
	| ownedRelationship += ViewRenderingMember
;

Expose returns SysML::Expose :
	( ownedRelationship += PrefixDocumentation )*
	( visibility = VisibilityIndicator )?  
	'expose' ( ImportedNamespace | ImportedFilterPackage ) ';'
;

/* VIEWPOINTS */

ViewpointKeyword :
	'viewpoint'
;

ViewpointDefKeyword :
	ViewpointKeyword 'def'
;

ViewpointUsageKeyword :
	ViewpointKeyword
;

ViewpointDefinition returns SysML::ViewpointDefinition :
	OccurrenceDefinitionPrefix ViewpointDefKeyword ConstraintDeclaration RequirementBody  
;

ViewpointUsage returns SysML::ViewpointUsage :
	OccurrenceUsagePrefix ViewpointUsageKeyword CalculationUsageDeclaration RequirementBody
;

/* RENDERINGS */

RenderingKeyword :
	'rendering'
;

RenderingDefKeyword :
	RenderingKeyword 'def'
;

RenderingDefinition returns SysML::RenderingDefinition :
	OccurrenceDefinitionPrefix RenderingDefKeyword Definition
;

RenderingUsageKeyword :
	RenderingKeyword
;

RenderingUsage returns SysML::RenderingUsage :
	OccurrenceUsagePrefix RenderingUsageKeyword Usage
;

/* EXPRESSIONS */

@Override
ExpressionBody returns SysML::Expression :
	CalculationBody
;